,0
528,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
529,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
530,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
531,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
532,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
533,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
534,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
535,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
536,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=100, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
537,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=100, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
538,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=100, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
539,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
540,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
541,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
542,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=100, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
543,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=100, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
544,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
545,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=100, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
546,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=100, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
547,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=100, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
548,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=100, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
549,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
550,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=100, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
551,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=100, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
552,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
553,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
554,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
555,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
556,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=100, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
557,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=100, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
558,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=100, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
559,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
560,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
561,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
562,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
563,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
564,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
565,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
566,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
567,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
568,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
569,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
570,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
571,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
572,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
573,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
574,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
575,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
576,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
577,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
578,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
579,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
580,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
581,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
582,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
583,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
584,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
585,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
586,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
587,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
588,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
589,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
590,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
591,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
592,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
593,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
594,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
595,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
596,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
597,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
598,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
599,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
600,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
601,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
602,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
603,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
604,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
605,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
606,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
607,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=100, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
608,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
609,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
610,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
611,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
612,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
613,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
614,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
615,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
616,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
617,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
618,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
619,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
620,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
621,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
622,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
623,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
624,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
625,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
626,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
627,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
628,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
629,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
630,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
631,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
632,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
633,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
634,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
635,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
636,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
637,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
638,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
639,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
640,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
641,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
642,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
643,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
644,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
645,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=100, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
646,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
647,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
648,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
649,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
650,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
651,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
652,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
653,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=100, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
654,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
655,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
656,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
657,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
658,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
659,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
660,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
661,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
662,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
663,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
664,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
665,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
666,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
667,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
668,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
669,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
670,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
671,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
672,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
673,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
674,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
675,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
676,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
677,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
678,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
679,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
680,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
681,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
682,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
683,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
684,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
685,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
686,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
687,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
688,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
689,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
690,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
691,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=100, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
692,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
693,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
694,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
695,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
696,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
697,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
698,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
699,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
700,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
701,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=100, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
702,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
703,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
704,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
705,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
706,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
707,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
708,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
709,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
710,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
711,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
712,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
713,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
714,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=100, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
715,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
716,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=100, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
717,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
718,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=100, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
719,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=100, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
720,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=100, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
721,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
722,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
723,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
724,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
725,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
726,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
727,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
728,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
729,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=100, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
730,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
731,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=100, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
732,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
733,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=100, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
734,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
735,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
736,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
737,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=100, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
738,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=100, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
739,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=100, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
740,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
741,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
742,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
743,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
744,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
745,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
746,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
747,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=100, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
748,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
749,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=100, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
750,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
751,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
752,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
753,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
754,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
755,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
756,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
757,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
758,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
759,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
760,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
761,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
762,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
763,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
764,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
765,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
766,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
767,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
768,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
769,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
770,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
771,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
772,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
773,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
774,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
775,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
776,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
777,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
778,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
779,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
780,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
781,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
782,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
783,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
784,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
785,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
786,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
787,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
788,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
789,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
790,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
791,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
792,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
793,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
794,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
795,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
796,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
797,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
798,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
799,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
800,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=100, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
801,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
802,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
803,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
804,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
805,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
806,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
807,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
808,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
809,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
810,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
811,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
812,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
813,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
814,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
815,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
816,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
817,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
818,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
819,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
820,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
821,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
822,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
823,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
824,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
825,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
826,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
827,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
828,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
829,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
830,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
831,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
832,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
833,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
834,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
835,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
836,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
837,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
838,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
839,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
840,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
841,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
842,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
843,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
844,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
845,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
846,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
847,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
848,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
849,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
850,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
851,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
852,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
853,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
854,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
855,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
856,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
857,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
858,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
859,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
860,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
861,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
862,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
863,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
864,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
865,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
866,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
867,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
868,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
869,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
870,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
871,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
872,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
873,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
874,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
875,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
876,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
877,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
878,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
879,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
880,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
881,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
882,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
883,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
884,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
885,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
886,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
887,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
888,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
889,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
890,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
891,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
892,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
893,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
894,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
895,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
896,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
897,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=100, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
898,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
899,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
900,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
901,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=100, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
902,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=100, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
903,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
904,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
905,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=100, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
906,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
907,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
908,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=100, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
909,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
910,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=100, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
911,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
912,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
913,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
914,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
915,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
916,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
917,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
918,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
919,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
920,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
921,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
922,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
923,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
924,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
925,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
926,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
927,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
928,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
929,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
930,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
931,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
932,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
933,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
934,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
935,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
936,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
937,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
938,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
939,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
940,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
941,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
942,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
943,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
944,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
945,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
946,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
947,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
948,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
949,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
950,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
951,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
952,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
953,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
954,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=100, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
955,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
956,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
957,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
958,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
959,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
960,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
961,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
962,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
963,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
964,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
965,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
966,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
967,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
968,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
969,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
970,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
971,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=100, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
972,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
973,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=100, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
974,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=100, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
975,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
976,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=100, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
977,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=100, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
978,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=100, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
979,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
980,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=100, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
981,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=100, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
982,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
983,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
984,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
985,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
986,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
987,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
988,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=100, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
989,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
990,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
991,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
992,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
993,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=100, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
994,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
995,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=100, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
996,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=100, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
997,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
998,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
999,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=100, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
1000,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
1001,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
1002,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
1003,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
1004,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
1005,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
1006,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
1007,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
1008,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=100, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
1009,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
1010,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
1011,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
1012,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
1013,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
1014,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
1015,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
1016,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
1017,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
1018,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=5,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
1019,"{'to_numpy': ToNumpyTransformer(), 'xgb': XGBRegressor(alpha=1, base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, eta=0.05, gamma=0, importance_type='gain',
       lambda=0, learning_rate=0.1, max_delta_step=0, max_depth=10,
       min_child_weight=1, missing=nan, n_estimators=25, n_jobs=1,
       nthread=None, objective='reg:linear', random_state=0, reg_alpha=0,
       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,
       subsample=1)}"
